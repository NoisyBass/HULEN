// First pass

void apply_outline(
		uniform float outline,
		
        // Vertex Inputs
        float4 position        : POSITION,    // Vertex position in model space
		float3 normal          : NORMAL,   // Normals of the model

        // Outputs
        out float4 oPosition         : POSITION,    // Transformed vertex position
        out float outlineDist : TEXCOORD1,
 
        // Model Level Inputs (projection matrix)
        uniform float4x4 worldViewProj)
{
    // Calculate output position
    float4 objectPosition = mul(worldViewProj, position);

	// Calculate the normals
	float3 norm = mul (float3x3(worldViewProj), normal);

	// Apply the increase of scale deppending of the outline
    oPosition = objectPosition;
    oPosition.xy += norm.xy * outline;

    outlineDist = distance(objectPosition, oPosition);
}

void apply_blinking_outline(
        uniform float outline,
        
        // Vertex Inputs
        float4 position        : POSITION,    // Vertex position in model space
        float2 texCoord0    : TEXCOORD0,    // Texture UV set 0
        float3 normal : NORMAL,   // Normals of the model

        // Outputs
        out float4 oPosition    : POSITION,    // Transformed vertex position
        out float2 uv0        : TEXCOORD0,    // UV0
 
        // Model Level Inputs (projection matrix)
        uniform float4x4 worldViewProj,
        uniform float time,
        uniform float frequency)
{
    // Calculate output position
    oPosition = mul(worldViewProj, position);
    // Calculate the normals
    float3 norm = mul (float3x3(worldViewProj), normal);

    float blink = sin(frequency * time);
    if (blink > 0)
    {
        // Apply the increase of scale deppending of the outline
        oPosition.xy += norm.xy * outline;
    }

    // Copy the input vertex UV to the output
    uv0 = texCoord0;
}



// Second pass

void displace_body(
        // Vertex Inputs
        float4 position        : POSITION,    // Vertex position in model space
        float2 texCoord0    : TEXCOORD0,    // Texture UV set 0
		float3 normal : NORMAL,   // Normals of the model

        // Outputs
        out float4 oPosition    : POSITION,    // Transformed vertex position
        out float2 uv0        : TEXCOORD0,    // UV0
 
        // Model Level Inputs (projection matrix)
        uniform float4x4 worldViewProj)
{
    // Calculate output position
    oPosition = mul(worldViewProj, position);
	
	// Move slightly the z position of the object
	oPosition.z += -0.5;

    // Copy the input vertex UV to the output
    uv0 = texCoord0;
}


// The object is colored in a custom color
 
float4 paint(uniform float4 customColor : COLOR) : COLOR
{
    return customColor;
}

float4 paint_outline(uniform float4 customColor : COLOR,
                     float outlineDist : TEXCOORD1
                     ) : COLOR
{

    float factor = 1.0/(1.0 + 0.09 * outlineDist + 1.0 * outlineDist * outlineDist);
    //float factor = outlineDist;
    return lerp(float4(1, 1, 1, 1), 
               float4(1, 1, 1, 0), 
               factor);
}

