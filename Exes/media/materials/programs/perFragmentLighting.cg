struct vs_Output
{
	float4 position  : POSITION;
	float3 objectPos : TEXCOORD0;
	float3 normal    : TEXCOORD1;
};

vs_Output perFragmentLighting_vs(float4 position : POSITION,
								float3 normal : NORMAL,
								uniform float4x4 ViewProjectionMatrix,
								uniform float4x4 normalMat)
{
	vs_Output OUT;

	OUT.position  = mul(ViewProjectionMatrix, position);
	OUT.objectPos = position.xyz;
	//OUT.normal    = mul((float3x3)normalMat, normal);
	OUT.normal	  = normal;
	//OUT.normal    = normalize(normal);
	//OUT.normal = mul(normalMat, normal).xyz;

	return OUT;
}


struct ps_Output {
	float4 color : COLOR;
};

ps_Output perFragmentLighting_ps(float4 position : TEXCOORD0,
								float3 normal : TEXCOORD1,
								uniform float3 globalAmbient,
								uniform float3 lightDiffuse0,
								uniform float3 lightSpecular0,
								uniform float3 lightPosition0,
								uniform float3 eyePosition,
								uniform float3 ke,
								uniform float3 ka,
								uniform float3 kd,
								uniform float3 ks,
								uniform float shininess
								)
{
	ps_Output OUT;

	float3 P = position.xyz;
	
	float3 N = normalize(normal);
	//float3 N = normal;

	// Compute the emissive term
	float3 emissive = ke;

	// Compute the ambient term
	float3 ambient = ka * globalAmbient;


	// Compute the diffuse term
	float3 L = normalize(lightPosition0 - P);
	float diffuseLight = max(dot(N, L), 0);
	float3 diffuse = kd * lightDiffuse0 * diffuseLight;
		

	// Compute the specular term
	float3 V = normalize(eyePosition - P);
	float3 H = normalize(L + V);
	float specularLight = pow(max(dot(N, H), 0), shininess);

	if (diffuseLight <= 0)
		specularLight = 0;
	 
	
	float3 specular = ks * lightSpecular0 * specularLight;

	if (distance(P, lightPosition0) >= 6.5)
	{
		diffuse = 0;
		specular = 0;	
	}

	//OUT.color = color;
	OUT.color.xyz = emissive + ambient + diffuse + specular;
	OUT.color.w = 1;

	return OUT;
}