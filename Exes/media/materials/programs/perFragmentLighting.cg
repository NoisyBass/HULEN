struct vs_Output
{
	float4 position  : POSITION;
	float2 uv0       : TEXCOORD0;
	float3 objectPos : TEXCOORD1;
	float3 normal    : TEXCOORD2;
};

vs_Output perFragmentLighting_vs(float4 position : POSITION,
								float3 normal : NORMAL,
								float2 texCoord0 : TEXCOORD0,
								uniform float4x4 ViewProjectionMatrix,
								uniform float4x4 normalMat)
{
	vs_Output OUT;

	OUT.position  = mul(ViewProjectionMatrix, position);
	OUT.objectPos = position.xyz;
	OUT.normal	  = normal;
	OUT.uv0	      = texCoord0;

	return OUT;
}


struct ps_Output {
	float4 color : COLOR;
};

ps_Output perFragmentLighting_ps(float2 uv0 : TEXCOORD0,
								float4 position : TEXCOORD1,
								float3 normal : TEXCOORD2,
								uniform float3 globalAmbient,
								uniform float3 lightDiffuse0,
								uniform float3 lightSpecular0,
								uniform float3 lightPosition0,
								uniform float4 lightAttenuation0,
								uniform float3 eyePosition,
								uniform float3 ke,
								uniform float3 ka,
								uniform float3 kd,
								uniform float3 ks,
								uniform float shininess,
								uniform sampler2D texture)
{
	ps_Output OUT;

	float3 P = position.xyz;
	
	float3 N = normalize(normal);
	//float3 N = normal;

	// Compute the emissive term
	float3 emissive = ke;

	// Compute the ambient term
	float3 ambient = ka * globalAmbient;


	// Compute the diffuse term
	float3 L = normalize(lightPosition0 - P);
	float diffuseLight = max(dot(N, L), 0);
	float3 diffuse = kd * lightDiffuse0 * diffuseLight;
		

	// Compute the specular term
	float3 V = normalize(eyePosition - P);
	float3 H = normalize(L + V);
	float specularLight = pow(max(dot(N, H), 0), shininess);

	if (diffuseLight <= 0)
		specularLight = 0;
	 
	
	float3 specular = ks * lightSpecular0 * specularLight;

	float range = lightAttenuation0.x;
	float4 texColor;
	if (distance(P, lightPosition0) >= range)
	{
		diffuse = 0;
		specular = 0;
		texColor = float4(0.0f, 0.0f, 0.0f, 0.0f);
	}
	else
	{
		texColor = tex2D(texture, uv0);
	}

	OUT.color.xyz = emissive + ambient + diffuse + specular;
	OUT.color.w = 1;

	OUT.color = OUT.color + texColor;

	return OUT;
}